/*
项目细节思考 :

什么时候 master 死亡? 
	当所有任务都结束的时候
什么时候 worker 死亡?
	获取任务很久但是超时的时候
什么时候 master 认定 任务失败?
	1) 任务长时间未完成
	2) 任务被提交的时候返回为失败。

容错 : 
1) 如何判断 worker 是否掉线？
	从给定任务开始计时,如若在特定时间内未完成任务,则认为超时。
2) 如若任务需要执行的时间确实超过这个固定的限定?
	第一次限时为 x 秒,派发出去两次如若都未完成,则限定改为 x*2秒。以此类推。
3) 如若已派发的任务其实还在进行,但是还需要一点时间,而这个时候按照判定将其视为失败。但之后该worker完成了,来提交任务怎么办?
	避免时间差,假设 master 任务 100ms 超时, 而 worker 则认为 95ms 内没完成就是超时。 这样因时间上的精度问题而导致双方认知不一致的问题。
	然后设置发送超时时间,达成 处理时间 + 超时时间 + 定时器的最大误差 * 2 < 限定超时时间, 就可以确保 master worker双方达成一致。
4) 在问题3)的基础之上,发现了新问题 : 当 worker 提交任务,并且在 rpc调用 时调用超时,于是返回。但发出去的包却在网络中堵塞。
直到 master 超时事件发生后,才接到这个包。
	当前解决方案 : 添加注册worker的过程。为每个worker分配一个 wuid(worker unique id), 并且在每次分配任务和提交任务的时候,
	都使用这个 wuid 来进行判断是否是 有效分配任务请求,有效提交任务请求。
*/


/*
开发计划 : 
	问题 {
		问题ID : 1
		问题背景 : 
			当Worker在请求任务时,如若master无可分配任务,
			则返回一个wait类型消息,worker收到消息后进入睡眠状态。等待下一次请求任务。
		问题描述 : 
			对于worker收到消息后进入睡眠状态,定时时长如若太短,频繁请求master浪费资源。
			时长太长,则效率太低。不具备实时性(一有任务就分配)。
		问题提出时间 : 2020年8月3日00:12:09
		问题提出者 : vizdl
	}
	解决方案 {
		问题ID : 1
		解决方案ID : 1
		解决方案描述 :
			使用条件变量,使得worker在请求任务的时候,如若无可分配任务,则使rpc调用进入睡眠(worker自然也进入睡眠)。
			等到条件满足,再返回结果。这样具备实时性,且因 master 和 worker 的对应线程都陷入睡眠,不会浪费额外的计算资源。
		解决方案提出时间 : 2020年8月3日00:16:25
		解决方案提出者 : vizdl
		解决方案思路引用 : MIT 6.824 hint
	}
	解决方案实现 {
		解决方案实现ID : 1.1 
		解决方案实现细节 : 
		解决方案实现时间 :
	}
	
	
	
	问题 {
		问题ID : 2
		问题背景 : 
			对于服务器的运行状态,当前只靠标准输出在控制台。
		问题描述 : 
			输出方式太落后,不便于观看(显然不如使用文本编辑工具看日志方便)
			输出格式太混乱,基本的事件没有很好的定义,导致观察困难。
		问题提出时间 : 2020年8月3日00:40:17
		问题提出者 : vizdl
	}
	解决方案 {
		问题ID : 2
		解决方案ID : 1
		解决方案描述 :
			规范日志输出格式,使用文件输出的方式,替换标准输出。
		解决方案提出时间 : 2020年8月3日00:43:27
		解决方案提出者 : vizdl
		解决方案思路引用 : 无
	}
	解决方案实现 {
		解决方案实现ID : 2.1 
		解决方案实现细节 : 
		解决方案实现时间 :
	}




	问题 {
        问题id : 3
        问题背景 :
            对于超时事件而言,应该至少提供两个方法 : 开启定时器和关闭定时器,但目前没有。
        问题描述 :
            无法关闭超时器
        问题提出时间 : 2020年8月8日18:27:53
        问题提出者 : vizdl
    }
    解决方案 {
        问题id : 3
        解决方案id : 1
        解决方案描述 :
            使用go time 库中的  AfterFunc 函数来进行操作,把之前的 taskTimer 改为回调函数。
        解决方案提出时间 : 2020年8月8日18:29:19
        解决方案提出者 : vizdl
        解决方案思路引用 : https://www.cnblogs.com/zhangqingping/p/4683390.html
    }
    解决方案实现 {
        解决方案实现id : 3.1
        解决方案实现细节 :
        解决方案实现时间 :
    }
*/