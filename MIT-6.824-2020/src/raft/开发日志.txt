/*
制造出一个 Raft 服务器
填写RequestVoteArgs和 RequestVoteReply结构。
修改 Make()以创建一个后台goroutine，
该后台goroutine将在有一段时间没有收到其他对等方的请求时
通过发出RequestVote RPC来定期启动领导者选举。
这样，同伴将了解谁是领导者（如果已经有领导者），或者成为领导者本身。
实现RequestVote() RPC处理程序，以便服务器相互投票。



概述 :
	在Raft中，有两个超时(选举超时和心跳超时)设置可控制选举。
	首先是选举超时。
	选举超时 : 选举超时是指追随者成为候选人之前的等待时间。
	选举超时被随机分配在150毫秒至300毫秒之间。
	选举超时后，关注者成为候选人并开始新的选举任期 ...
	为自己投票...并将请求投票消息发送给其他节点。
	如果接收节点在这个学期还没有投票，那么它将投票给候选人。
	...并且节点重置其选举超时。一旦候选人获得多数票，它就会成为领导者。
	领导者开始向其关注者发送“ 添加条目”消息。这些消息以心跳超时指定的时间间隔发送。
	跟随者然后响应每个追加条目消息。
	此选举任期将持续到追随者停止接收心跳并成为候选人为止。

	让我们停止领导，观察选举连任。
	节点B现在是任期2的负责人。
	要获得多数票，可以保证每学期只能选出一位领导人。
	如果两个节点同时成为候选节点，则可能会发生拆分表决。
	让我们看一个分割投票的例子...
	两个节点都开始以相同的任期进行选举...
	...每个都先到达一个跟随者节点。
	现在，每位候选人都有2票，并且在这个任期中将无法获得更多选票。
	则超时等待新的任期..

问题 :
	1) 如何保证只有一个领导者。


跟随者 <-> 候选人 -> 领导者
两种超时 :
	1) 心跳超时 : 跟随者在一段时间没有收到心跳包,自动开启选举超时。
	2) 选举超时 : 选举超时被随机分配在150毫秒至300毫秒之间。
	如若选举超时则自己到下一期选举状态去。开启新一轮投票。
关系转换条件 :
	群众超时没收到心跳包,自动成为候选人。
	候选人得到大多数选票,升级成为领导者。
	候选人未得到大多数选票,退回群众。
	领导者如若没有死,就一直是领导者。
选票行为规范 :
	1) 只要有人说 : 我是领导,那么所有人都会认为他是领导。
	2) 只要心跳超时,马上就变候选人了。
	3) 如若已经有一半一直无法恢复,则无法选出新的领导。
	4) 对于一轮选举而言
		每个候选者都会记载自己的投票结果(三种) : 赞成,反对,无响应。
		每个追随者 : 这轮选了谁。
情境状态 :
	1) 如若当前集群中存在领导,则存在所有的状态可能。
	但无论其他人处于什么状态。收到了领导的心跳包,就认为他是领导(他是具有大多数票的)。
	如若当前无领导,则可能存在两种状态 : 追随者, 候选人。
	2) 无论如何,如若一个raft得到大多数选票,则直接向 状态1) 转换。
	其他人不可能再拿到大多数选票了。
	问题 : 是否存在当前领导当选,但某一raft以为自己进入新一轮选举了?
	回答 : 可能。
	问题 : 如何避免上述问题导致可能选出两个领导来?
		× 1) 就算他进入了第 x + 1 轮选举,其他显示已经投了 x 轮任期领导的raft只要不支持他的工作就行。
			理论上可行,但是与选举状态的举措冲突(只要有更新的选举任期投票请求,就投)。
		√? 2) 他会发选票给领导,领导直接驳回就行了。
			这似乎与 得到大多数选票立刻成为领导 的决策有冲突,因为可能在没被驳回之前就已经得到大多数选票了。

选举状态分析/选举任期分析/候选人与追随者行为分析 :
	1) 存在一个候选者
		1) 候选者掌握的选举周期最大。
			追随者 : 收到投票后,同步选举周期为候选人选举周期。然后投票。
		2) 候选人掌握的选举周期比所有追随者都小
			追随者 : 收到投票后,直接投反对票(存疑)。
	2) 存在多个候选者


心跳定时的界定 :
    1) 接收到心跳包刷新(增加的时间需要是不确定但增加后的结果在一定界限之内)
    2) 心跳包的处理问题,心跳放在哪里?
        发出心跳必须与核心部分放在一起,否则心跳则无法体现程序的状态。

事件的分类 :
    心跳超时事件 : 心跳定时器超时
    选举超时事件 : 选举定时器超时
    投票请求事件 : 收到投票请求
    心跳事件 : 收到心跳包

三种模式转换的条件 :
第n-1届跟随者 -> 第n届候选人 : 心跳超时(即使还有领导者)。
    行为 : raft变为候选人,获得的票数清零,选举周期加一,获得的票数加一,向其他服务器发起投票请求。
第n-1届候选人 -> 第n届候选人 : 选举超时(即使有已经得到大多数票的第n-1届候选人)
    行为 : 选举周期加一,获得的票数清零,获得的票数加一,向其他服务器发起投票请求。
第n届候选人 -> 第n届跟随者 : 选举失败,新领导发送心跳包过来了。
    行为 : 获得的票数清零,设置新的领导者。
第n届候选人 -> 第n届领导者 : 获得的票数大于所有raft服务器的一半。
    行为 : 获得的票数清零,向其他raft服务器定期发送心跳包。
第n届领导者 -> 第x届跟随者 :
    可能性 :
    1) 发送的心跳超时,出现了新一轮的候选者。后收到投票请求。
        行为 : 设置为跟随者,获得的票数清零,投新一轮第一个发送投票请求的候选者。
    2) 当前程序宕机重启后转换为跟随者。
        行为 : 设置为跟随者,获得的票数清零,从持久化服务器获取重启前的选举周期等数据。

对于各个状态下的应对策略 :
追随者 :
    心跳超时事件 : 变为候选者
    心跳事件 : 收到某个raft发送过来的心跳包
        1) 无效心跳 : 心跳包上任期小于当前任期
            1) 拒绝接受心跳包
        2) 有效心跳 : 心跳包上任期大于等于当前任期
            1) 先关闭心跳计时器(当前状态还是追随者,说明心跳超时并未发生可直接关闭,否则心跳超时会修改其为候选者)
            2) 开启新一轮的心跳计时
            3) 根据心跳包更新消息
    投票请求事件 : 收到某个raft发送过来的投票请求
        1) 无效投票请求 : 投票请求包上任期小于当前任期
            1) 然后返回拒绝投票请求
        2) 有效但拒绝 : 投票请求包上任期等于任期但该raft当前轮已经投过了票
            1) 然后返回拒绝投票请求
        3) 有效且赞成 :
            1) 投票请求包上任期大于当前任期
                1) 先关闭心跳计时器(当前状态还是追随者,说明心跳超时并未发生可直接关闭,否则心跳超时会修改其为候选者)
                2) 根据投票请求包更新消息
            2) 等于当前任期但这轮未投过票
                1) 先关闭心跳计时器(当前状态还是追随者,说明心跳超时并未发生可直接关闭,否则心跳超时会修改其为候选者)
                2) 开启心跳计时
候选者 :
    选举超时事件 : 变为新一轮的候选者
    心跳事件 : 收到某个raft发送过来的心跳包
        1) 无效心跳 : 心跳包上任期小于当前任期(说明某个raft举措出现问题。)
            1) 记日志,然后返回拒绝接受心跳包
        2) 有效心跳 : 心跳包上任期大于等于当前任期
            1) 判断是否开启候选计时器,如若开启先关闭候选计时器(避免刚转换为候选者未开启候选计时器的情况)
            2）转换为追随者
            3) 根据心跳包更新消息
        投票请求事件 : 收到某个raft发送过来的投票请求
        1) 无效投票请求 : 投票请求包上任期小于当前任期
            1) 然后返回拒绝投票请求
        2) 有效但拒绝 : 投票请求包上任期等于任期
            1) 然后返回拒绝投票请求
        3) 有效且赞成 : 投票请求包上任期大于当前任期
            1) 先关闭候选计时器
            2) 变成追随者
            3) 根据投票请求包更新消息
            (最后不用开启心跳计时器)
领导者 :
    心跳事件 : 收到某个raft发送过来的心跳包(新一轮的领导发过来的?)
        1) 无效心跳 : 心跳包上任期 小于等于 当前任期(说明某个raft举措出现问题。)
            1) 记日志,然后返回拒绝接受心跳包
        2) 有效心跳 : 心跳包上任期大于当前任期
            1) 转换为追随者
            2) 根据心跳包更新消息
        投票请求事件 :  收到某个raft发送过来的投票请求
         1) 无效投票请求 : 投票请求包上任期小于当前任期
             1) 然后返回拒绝投票请求
         2) 有效但拒绝 : 投票请求包上任期等于任期
             1) 然后返回拒绝投票请求
         3) 有效且赞成 : 投票请求包上任期大于当前任期
             1) 变成追随者
             2) 根据投票请求包更新消息
             3) 开启心跳计时器
主动事件 :
追随者 :
    开启心跳计时器,然后等待(堵塞)其他事件发生。如若状态发生变化,则取消堵塞
候选者 :
    开启选举计时器
    发起投票(途中一旦发生其他事件,立马要进行身份转换,如若投票成功(超过一半),则立马转换身份退出去。)
领导者 :
    定时发送心跳包(一旦发生其他事件,立马要进行身份转换)
    或许可以开启心跳包定时器,然后每次超时发一次新的心跳包,然后设置新的心跳包定时器
    进入堵塞状态。

在三种情况下可能发生事件 :
    1) 追随者堵塞的情况
    2) 候选者发送完一次投票请求的情况
    3) 领导者发送完一次心跳包的事情
*/